# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret="[IU9F]q;jjG3^5p_yeSSIC_S=/lWP:9=N[uQMey7;n5BxlBX5tVk]nBV?5c:n@5["

# The application languages
# ~~~~~
play.i18n.langs=[ "en" , "de" ]
application.languageNames="Englisch,Deutsch"
application.languageFlags="us,de"


## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  enabled  += "com.github.tuxBurner.jsAnnotations.JsRoutesModule"
  enabled  += "plugins.jobs.JobModule"

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}




# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
#db.default.driver=org.h2.Driver
#db.default.url="jdbc:h2:mem:play"
#db.default.user=sa
#db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS
db {
  default.driver = com.mysql.jdbc.Driver
  default.url = "jdbc:mysql://localhost:6606/avdb"
  default.username = avdb
  default.password = avdb
  default.logSql=true
}


## IDE
# https://www.playframework.com/documentation/latest/IDE
# ~~~~~
# Depending on your IDE, you can add a hyperlink for errors that will jump you
# directly to the code location in the IDE in dev mode. The following line makes
# use of the IntelliJ IDEA REST interface:
play.editor="http://localhost:63342/api/file/?file=%s&line=%s"



# Evolutions
# ~~~~~
# You can disable evolutions if needed
evolutionplugin=enabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
ebean.default="models.*"

# applictaion configs
dvddb.dvds.perpage={"COVERVIEW" : 15, "SMALLCOVERVIEW" : 24, "TABLEVIEW" : 48  }
dvddb.dvds.defaultview="COVERVIEW"
dvddb.fillDvds=false

# if set to true all the images in the database will be indexed if not already done
dvddb.fillMovieImages=false

dvddb.ageratings=["FSK0","FSK6","FSK12","FSK16","FSK18"]
dvddb.copytypes=["DVD","BLURAY","BLURAY3D","HDDVD"]
dvddb.imagespath="images/"


include "email.conf"
include "amazon.ws.conf"
include "secrets.conf"
